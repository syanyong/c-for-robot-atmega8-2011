
basic_io.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000080  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  000000d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000001b  00000000  00000000  000000f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000075  00000000  00000000  0000010f  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 0000003f  00000000  00000000  00000184  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000000f7  00000000  00000000  000001c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000020  00000000  00000000  000002bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000086  00000000  00000000  000002dc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	19 c0       	rjmp	.+50     	; 0x36 <__bad_interrupt>
   4:	18 c0       	rjmp	.+48     	; 0x36 <__bad_interrupt>
   6:	17 c0       	rjmp	.+46     	; 0x36 <__bad_interrupt>
   8:	16 c0       	rjmp	.+44     	; 0x36 <__bad_interrupt>
   a:	15 c0       	rjmp	.+42     	; 0x36 <__bad_interrupt>
   c:	14 c0       	rjmp	.+40     	; 0x36 <__bad_interrupt>
   e:	13 c0       	rjmp	.+38     	; 0x36 <__bad_interrupt>
  10:	12 c0       	rjmp	.+36     	; 0x36 <__bad_interrupt>
  12:	11 c0       	rjmp	.+34     	; 0x36 <__bad_interrupt>
  14:	10 c0       	rjmp	.+32     	; 0x36 <__bad_interrupt>
  16:	0f c0       	rjmp	.+30     	; 0x36 <__bad_interrupt>
  18:	0e c0       	rjmp	.+28     	; 0x36 <__bad_interrupt>
  1a:	0d c0       	rjmp	.+26     	; 0x36 <__bad_interrupt>
  1c:	0c c0       	rjmp	.+24     	; 0x36 <__bad_interrupt>
  1e:	0b c0       	rjmp	.+22     	; 0x36 <__bad_interrupt>
  20:	0a c0       	rjmp	.+20     	; 0x36 <__bad_interrupt>
  22:	09 c0       	rjmp	.+18     	; 0x36 <__bad_interrupt>
  24:	08 c0       	rjmp	.+16     	; 0x36 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61
  32:	02 d0       	rcall	.+4      	; 0x38 <main>
  34:	23 c0       	rjmp	.+70     	; 0x7c <_exit>

00000036 <__bad_interrupt>:
  36:	e4 cf       	rjmp	.-56     	; 0x0 <__vectors>

00000038 <main>:
/*
	Main Function.
*/
int main()
{
	DDRB = 0xFE;	
  38:	8e ef       	ldi	r24, 0xFE	; 254
  3a:	87 bb       	out	0x17, r24	; 23
	PORTB = 0x00;
  3c:	18 ba       	out	0x18, r1	; 24

	DDRC = 0xFF;
  3e:	8f ef       	ldi	r24, 0xFF	; 255
  40:	84 bb       	out	0x14, r24	; 20
	PORTC = 0x00;
  42:	15 ba       	out	0x15, r1	; 21

	/* PWM */
	TCCR1A = 0xA2;
  44:	82 ea       	ldi	r24, 0xA2	; 162
  46:	8f bd       	out	0x2f, r24	; 47
	TCCR1B = 0x11;
  48:	81 e1       	ldi	r24, 0x11	; 17
  4a:	8e bd       	out	0x2e, r24	; 46
	ICR1 = 10000;
  4c:	80 e1       	ldi	r24, 0x10	; 16
  4e:	97 e2       	ldi	r25, 0x27	; 39
  50:	97 bd       	out	0x27, r25	; 39
  52:	86 bd       	out	0x26, r24	; 38

	OCR1A = 9000;
  54:	88 e2       	ldi	r24, 0x28	; 40
  56:	93 e2       	ldi	r25, 0x23	; 35
  58:	9b bd       	out	0x2b, r25	; 43
  5a:	8a bd       	out	0x2a, r24	; 42
	OCR1B = 9000;
  5c:	99 bd       	out	0x29, r25	; 41
  5e:	88 bd       	out	0x28, r24	; 40
	
	sbi(PORTC,0);
  60:	a8 9a       	sbi	0x15, 0	; 21
	cbi(PORTC,1);
  62:	a9 98       	cbi	0x15, 1	; 21

	while(1)
	{
		if( bit_is_clear(PINB,0) )
  64:	b0 99       	sbic	0x16, 0	; 22
  66:	05 c0       	rjmp	.+10     	; 0x72 <__SREG__+0x33>
		{
			sbi(PORTC,0);
  68:	a8 9a       	sbi	0x15, 0	; 21
			cbi(PORTC,1);
  6a:	a9 98       	cbi	0x15, 1	; 21
			cbi(PORTC,2);
  6c:	aa 98       	cbi	0x15, 2	; 21
			sbi(PORTC,3);	
  6e:	ab 9a       	sbi	0x15, 3	; 21
  70:	f9 cf       	rjmp	.-14     	; 0x64 <__SREG__+0x25>
		}
		else
		{
			sbi(PORTC,0);
  72:	a8 9a       	sbi	0x15, 0	; 21
			cbi(PORTC,1);
  74:	a9 98       	cbi	0x15, 1	; 21
			sbi(PORTC,2);
  76:	aa 9a       	sbi	0x15, 2	; 21
			cbi(PORTC,3);
  78:	ab 98       	cbi	0x15, 3	; 21
  7a:	f4 cf       	rjmp	.-24     	; 0x64 <__SREG__+0x25>

0000007c <_exit>:
  7c:	f8 94       	cli

0000007e <__stop_program>:
  7e:	ff cf       	rjmp	.-2      	; 0x7e <__stop_program>
