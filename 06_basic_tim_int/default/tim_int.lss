
tim_int.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000bc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  000000bc  00000130  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 00000020  00000000  00000000  00000132  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000035  00000000  00000000  00000152  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000187  00000000  00000000  00000187  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000000ff  00000000  00000000  0000030e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000001a0  00000000  00000000  0000040d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000030  00000000  00000000  000005b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000eb  00000000  00000000  000005e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000080  00000000  00000000  000006cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000048  00000000  00000000  0000074b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	24 c0       	rjmp	.+72     	; 0x4c <__bad_interrupt>
   4:	23 c0       	rjmp	.+70     	; 0x4c <__bad_interrupt>
   6:	22 c0       	rjmp	.+68     	; 0x4c <__bad_interrupt>
   8:	21 c0       	rjmp	.+66     	; 0x4c <__bad_interrupt>
   a:	20 c0       	rjmp	.+64     	; 0x4c <__bad_interrupt>
   c:	1f c0       	rjmp	.+62     	; 0x4c <__bad_interrupt>
   e:	1e c0       	rjmp	.+60     	; 0x4c <__bad_interrupt>
  10:	1d c0       	rjmp	.+58     	; 0x4c <__bad_interrupt>
  12:	38 c0       	rjmp	.+112    	; 0x84 <__vector_9>
  14:	1b c0       	rjmp	.+54     	; 0x4c <__bad_interrupt>
  16:	1a c0       	rjmp	.+52     	; 0x4c <__bad_interrupt>
  18:	19 c0       	rjmp	.+50     	; 0x4c <__bad_interrupt>
  1a:	18 c0       	rjmp	.+48     	; 0x4c <__bad_interrupt>
  1c:	17 c0       	rjmp	.+46     	; 0x4c <__bad_interrupt>
  1e:	16 c0       	rjmp	.+44     	; 0x4c <__bad_interrupt>
  20:	15 c0       	rjmp	.+42     	; 0x4c <__bad_interrupt>
  22:	14 c0       	rjmp	.+40     	; 0x4c <__bad_interrupt>
  24:	13 c0       	rjmp	.+38     	; 0x4c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	ec eb       	ldi	r30, 0xBC	; 188
  3a:	f0 e0       	ldi	r31, 0x00	; 0
  3c:	02 c0       	rjmp	.+4      	; 0x42 <.do_copy_data_start>

0000003e <.do_copy_data_loop>:
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0

00000042 <.do_copy_data_start>:
  42:	a2 36       	cpi	r26, 0x62	; 98
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <.do_copy_data_loop>
  48:	02 d0       	rcall	.+4      	; 0x4e <main>
  4a:	36 c0       	rjmp	.+108    	; 0xb8 <_exit>

0000004c <__bad_interrupt>:
  4c:	d9 cf       	rjmp	.-78     	; 0x0 <__vectors>

0000004e <main>:
#include <util/delay.h>

char toggle = 1;

int main(){
	DDRB = 0xFF;
  4e:	8f ef       	ldi	r24, 0xFF	; 255
  50:	87 bb       	out	0x17, r24	; 23
	PORTB = 0x00;
  52:	18 ba       	out	0x18, r1	; 24

	TCCR0 = (1<<CS02)|(0<<CS01)|(1<<CS00);
  54:	85 e0       	ldi	r24, 0x05	; 5
  56:	83 bf       	out	0x33, r24	; 51
	TIMSK = (1<<TOIE0);
  58:	81 e0       	ldi	r24, 0x01	; 1
  5a:	89 bf       	out	0x39, r24	; 57
	sei();
  5c:	78 94       	sei
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  5e:	29 e1       	ldi	r18, 0x19	; 25
  60:	30 e0       	ldi	r19, 0x00	; 0

	while(1)
	{	
		sbi(PORTB,0);
  62:	c0 9a       	sbi	0x18, 0	; 24
  64:	88 e8       	ldi	r24, 0x88	; 136
  66:	93 e1       	ldi	r25, 0x13	; 19
  68:	f9 01       	movw	r30, r18
  6a:	31 97       	sbiw	r30, 0x01	; 1
  6c:	f1 f7       	brne	.-4      	; 0x6a <main+0x1c>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  6e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  70:	d9 f7       	brne	.-10     	; 0x68 <main+0x1a>
		_delay_ms(500);
		cbi(PORTB,0);
  72:	c0 98       	cbi	0x18, 0	; 24
  74:	88 e8       	ldi	r24, 0x88	; 136
  76:	93 e1       	ldi	r25, 0x13	; 19
  78:	f9 01       	movw	r30, r18
  7a:	31 97       	sbiw	r30, 0x01	; 1
  7c:	f1 f7       	brne	.-4      	; 0x7a <main+0x2c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  7e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  80:	d9 f7       	brne	.-10     	; 0x78 <main+0x2a>
  82:	ef cf       	rjmp	.-34     	; 0x62 <main+0x14>

00000084 <__vector_9>:
	}

	return 0;
}

ISR(TIMER0_OVF_vect){
  84:	1f 92       	push	r1
  86:	0f 92       	push	r0
  88:	0f b6       	in	r0, 0x3f	; 63
  8a:	0f 92       	push	r0
  8c:	11 24       	eor	r1, r1
  8e:	8f 93       	push	r24
	if(toggle)
  90:	80 91 60 00 	lds	r24, 0x0060
  94:	88 23       	and	r24, r24
  96:	11 f0       	breq	.+4      	; 0x9c <__vector_9+0x18>
	{
		sbi(PORTB,1);
  98:	c1 9a       	sbi	0x18, 1	; 24
  9a:	01 c0       	rjmp	.+2      	; 0x9e <__vector_9+0x1a>
	}
	else{
		cbi(PORTB,1);
  9c:	c1 98       	cbi	0x18, 1	; 24
	}
	toggle = !toggle;
  9e:	10 92 60 00 	sts	0x0060, r1
  a2:	88 23       	and	r24, r24
  a4:	19 f4       	brne	.+6      	; 0xac <__vector_9+0x28>
  a6:	81 e0       	ldi	r24, 0x01	; 1
  a8:	80 93 60 00 	sts	0x0060, r24
}
  ac:	8f 91       	pop	r24
  ae:	0f 90       	pop	r0
  b0:	0f be       	out	0x3f, r0	; 63
  b2:	0f 90       	pop	r0
  b4:	1f 90       	pop	r1
  b6:	18 95       	reti

000000b8 <_exit>:
  b8:	f8 94       	cli

000000ba <__stop_program>:
  ba:	ff cf       	rjmp	.-2      	; 0xba <__stop_program>
