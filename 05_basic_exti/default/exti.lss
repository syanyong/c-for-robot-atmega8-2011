
exti.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000be  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  000000be  00000132  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 00000020  00000000  00000000  00000134  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000035  00000000  00000000  00000154  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000187  00000000  00000000  00000189  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000000ff  00000000  00000000  00000310  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000001a5  00000000  00000000  0000040f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000030  00000000  00000000  000005b4  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000e5  00000000  00000000  000005e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000080  00000000  00000000  000006c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000048  00000000  00000000  00000749  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	41 c0       	rjmp	.+130    	; 0x86 <__vector_1>
   4:	23 c0       	rjmp	.+70     	; 0x4c <__bad_interrupt>
   6:	22 c0       	rjmp	.+68     	; 0x4c <__bad_interrupt>
   8:	21 c0       	rjmp	.+66     	; 0x4c <__bad_interrupt>
   a:	20 c0       	rjmp	.+64     	; 0x4c <__bad_interrupt>
   c:	1f c0       	rjmp	.+62     	; 0x4c <__bad_interrupt>
   e:	1e c0       	rjmp	.+60     	; 0x4c <__bad_interrupt>
  10:	1d c0       	rjmp	.+58     	; 0x4c <__bad_interrupt>
  12:	1c c0       	rjmp	.+56     	; 0x4c <__bad_interrupt>
  14:	1b c0       	rjmp	.+54     	; 0x4c <__bad_interrupt>
  16:	1a c0       	rjmp	.+52     	; 0x4c <__bad_interrupt>
  18:	19 c0       	rjmp	.+50     	; 0x4c <__bad_interrupt>
  1a:	18 c0       	rjmp	.+48     	; 0x4c <__bad_interrupt>
  1c:	17 c0       	rjmp	.+46     	; 0x4c <__bad_interrupt>
  1e:	16 c0       	rjmp	.+44     	; 0x4c <__bad_interrupt>
  20:	15 c0       	rjmp	.+42     	; 0x4c <__bad_interrupt>
  22:	14 c0       	rjmp	.+40     	; 0x4c <__bad_interrupt>
  24:	13 c0       	rjmp	.+38     	; 0x4c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	ee eb       	ldi	r30, 0xBE	; 190
  3a:	f0 e0       	ldi	r31, 0x00	; 0
  3c:	02 c0       	rjmp	.+4      	; 0x42 <.do_copy_data_start>

0000003e <.do_copy_data_loop>:
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0

00000042 <.do_copy_data_start>:
  42:	a2 36       	cpi	r26, 0x62	; 98
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <.do_copy_data_loop>
  48:	02 d0       	rcall	.+4      	; 0x4e <main>
  4a:	37 c0       	rjmp	.+110    	; 0xba <_exit>

0000004c <__bad_interrupt>:
  4c:	d9 cf       	rjmp	.-78     	; 0x0 <__vectors>

0000004e <main>:
#include <util/delay.h>

char toggle = 1;

int main(){
	DDRB = 0xFF;
  4e:	8f ef       	ldi	r24, 0xFF	; 255
  50:	87 bb       	out	0x17, r24	; 23
	PORTB = 0x00;
  52:	18 ba       	out	0x18, r1	; 24
	DDRD = 0x00;
  54:	11 ba       	out	0x11, r1	; 17

	MCUCR = (1<<ISC01)|(0<<ISC00);	
  56:	82 e0       	ldi	r24, 0x02	; 2
  58:	85 bf       	out	0x35, r24	; 53
	GICR  = (1<<INT0);
  5a:	80 e4       	ldi	r24, 0x40	; 64
  5c:	8b bf       	out	0x3b, r24	; 59
	sei();
  5e:	78 94       	sei
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  60:	29 e1       	ldi	r18, 0x19	; 25
  62:	30 e0       	ldi	r19, 0x00	; 0

	while(1)
	{	
		sbi(PORTB,0);
  64:	c0 9a       	sbi	0x18, 0	; 24
  66:	88 e8       	ldi	r24, 0x88	; 136
  68:	93 e1       	ldi	r25, 0x13	; 19
  6a:	f9 01       	movw	r30, r18
  6c:	31 97       	sbiw	r30, 0x01	; 1
  6e:	f1 f7       	brne	.-4      	; 0x6c <main+0x1e>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  70:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  72:	d9 f7       	brne	.-10     	; 0x6a <main+0x1c>
		_delay_ms(500);
		cbi(PORTB,0);
  74:	c0 98       	cbi	0x18, 0	; 24
  76:	88 e8       	ldi	r24, 0x88	; 136
  78:	93 e1       	ldi	r25, 0x13	; 19
  7a:	f9 01       	movw	r30, r18
  7c:	31 97       	sbiw	r30, 0x01	; 1
  7e:	f1 f7       	brne	.-4      	; 0x7c <main+0x2e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  80:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  82:	d9 f7       	brne	.-10     	; 0x7a <main+0x2c>
  84:	ef cf       	rjmp	.-34     	; 0x64 <main+0x16>

00000086 <__vector_1>:
	}

	return 0;
}

ISR(INT0_vect){
  86:	1f 92       	push	r1
  88:	0f 92       	push	r0
  8a:	0f b6       	in	r0, 0x3f	; 63
  8c:	0f 92       	push	r0
  8e:	11 24       	eor	r1, r1
  90:	8f 93       	push	r24
	if(toggle)
  92:	80 91 60 00 	lds	r24, 0x0060
  96:	88 23       	and	r24, r24
  98:	11 f0       	breq	.+4      	; 0x9e <__vector_1+0x18>
	{
		sbi(PORTB,1);
  9a:	c1 9a       	sbi	0x18, 1	; 24
  9c:	01 c0       	rjmp	.+2      	; 0xa0 <__vector_1+0x1a>
	}
	else{
		cbi(PORTB,1);
  9e:	c1 98       	cbi	0x18, 1	; 24
	}
	toggle = !toggle;
  a0:	10 92 60 00 	sts	0x0060, r1
  a4:	88 23       	and	r24, r24
  a6:	19 f4       	brne	.+6      	; 0xae <__vector_1+0x28>
  a8:	81 e0       	ldi	r24, 0x01	; 1
  aa:	80 93 60 00 	sts	0x0060, r24
}
  ae:	8f 91       	pop	r24
  b0:	0f 90       	pop	r0
  b2:	0f be       	out	0x3f, r0	; 63
  b4:	0f 90       	pop	r0
  b6:	1f 90       	pop	r1
  b8:	18 95       	reti

000000ba <_exit>:
  ba:	f8 94       	cli

000000bc <__stop_program>:
  bc:	ff cf       	rjmp	.-2      	; 0xbc <__stop_program>
