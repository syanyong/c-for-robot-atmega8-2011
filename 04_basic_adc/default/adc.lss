
adc.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000098  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  000000ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000033  00000000  00000000  0000010c  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000000d0  00000000  00000000  0000013f  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 0000009b  00000000  00000000  0000020f  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000000d4  00000000  00000000  000002aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000040  00000000  00000000  00000380  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000a4  00000000  00000000  000003c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000001f  00000000  00000000  00000464  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	19 c0       	rjmp	.+50     	; 0x36 <__bad_interrupt>
   4:	18 c0       	rjmp	.+48     	; 0x36 <__bad_interrupt>
   6:	17 c0       	rjmp	.+46     	; 0x36 <__bad_interrupt>
   8:	16 c0       	rjmp	.+44     	; 0x36 <__bad_interrupt>
   a:	15 c0       	rjmp	.+42     	; 0x36 <__bad_interrupt>
   c:	14 c0       	rjmp	.+40     	; 0x36 <__bad_interrupt>
   e:	13 c0       	rjmp	.+38     	; 0x36 <__bad_interrupt>
  10:	12 c0       	rjmp	.+36     	; 0x36 <__bad_interrupt>
  12:	11 c0       	rjmp	.+34     	; 0x36 <__bad_interrupt>
  14:	10 c0       	rjmp	.+32     	; 0x36 <__bad_interrupt>
  16:	0f c0       	rjmp	.+30     	; 0x36 <__bad_interrupt>
  18:	0e c0       	rjmp	.+28     	; 0x36 <__bad_interrupt>
  1a:	0d c0       	rjmp	.+26     	; 0x36 <__bad_interrupt>
  1c:	0c c0       	rjmp	.+24     	; 0x36 <__bad_interrupt>
  1e:	0b c0       	rjmp	.+22     	; 0x36 <__bad_interrupt>
  20:	0a c0       	rjmp	.+20     	; 0x36 <__bad_interrupt>
  22:	09 c0       	rjmp	.+18     	; 0x36 <__bad_interrupt>
  24:	08 c0       	rjmp	.+16     	; 0x36 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61
  32:	1b d0       	rcall	.+54     	; 0x6a <main>
  34:	2f c0       	rjmp	.+94     	; 0x94 <_exit>

00000036 <__bad_interrupt>:
  36:	e4 cf       	rjmp	.-56     	; 0x0 <__vectors>

00000038 <InitADC>:
/**
  * @Function->   Initial Analog to Digital Convertor
  */
void InitADC(void){										

	ADCSRA 	= (1 << 7)|(0 << 5);					
  38:	80 e8       	ldi	r24, 0x80	; 128
  3a:	86 b9       	out	0x06, r24	; 6
	ADCSRA |= (0 << ADPS2)|(1 << ADPS1)|(1 << ADPS0);
  3c:	86 b1       	in	r24, 0x06	; 6
  3e:	83 60       	ori	r24, 0x03	; 3
  40:	86 b9       	out	0x06, r24	; 6

}
  42:	08 95       	ret

00000044 <ReadADC>:

/**
  * @Function->   Initial Analog to Digital Convertor
  */
unsigned int ReadADC(volatile unsigned char ucMUX){		
  44:	df 93       	push	r29
  46:	cf 93       	push	r28
  48:	0f 92       	push	r0
  4a:	cd b7       	in	r28, 0x3d	; 61
  4c:	de b7       	in	r29, 0x3e	; 62
  4e:	89 83       	std	Y+1, r24	; 0x01

	ADMUX = (0 << REFS1)|(1 << REFS0)|(ucMUX);
  50:	89 81       	ldd	r24, Y+1	; 0x01
  52:	80 64       	ori	r24, 0x40	; 64
  54:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1 << ADSC);
  56:	36 9a       	sbi	0x06, 6	; 6
	while(!(ADCSRA&(1 << ADIF)));
  58:	34 9b       	sbis	0x06, 4	; 6
  5a:	fe cf       	rjmp	.-4      	; 0x58 <ReadADC+0x14>

	return ADCW;
  5c:	24 b1       	in	r18, 0x04	; 4
  5e:	35 b1       	in	r19, 0x05	; 5

}
  60:	c9 01       	movw	r24, r18
  62:	0f 90       	pop	r0
  64:	cf 91       	pop	r28
  66:	df 91       	pop	r29
  68:	08 95       	ret

0000006a <main>:
/**
  * @Function->   Initial Analog to Digital Convertor
  */
void InitADC(void){										

	ADCSRA 	= (1 << 7)|(0 << 5);					
  6a:	80 e8       	ldi	r24, 0x80	; 128
  6c:	86 b9       	out	0x06, r24	; 6
	ADCSRA |= (0 << ADPS2)|(1 << ADPS1)|(1 << ADPS0);
  6e:	86 b1       	in	r24, 0x06	; 6
  70:	83 60       	ori	r24, 0x03	; 3
  72:	86 b9       	out	0x06, r24	; 6
  * @Function->   Main Program.
  */
int main(){
	InitADC();

	DDRD = 0xFF;
  74:	8f ef       	ldi	r24, 0xFF	; 255
  76:	81 bb       	out	0x11, r24	; 17
	while(1){

		if((ReadADC(0) >= 300)&&(ReadADC(0) <= 1023))
  78:	80 e0       	ldi	r24, 0x00	; 0
  7a:	e4 df       	rcall	.-56     	; 0x44 <ReadADC>
  7c:	8c 52       	subi	r24, 0x2C	; 44
  7e:	91 40       	sbci	r25, 0x01	; 1
  80:	38 f0       	brcs	.+14     	; 0x90 <main+0x26>
  82:	80 e0       	ldi	r24, 0x00	; 0
  84:	df df       	rcall	.-66     	; 0x44 <ReadADC>
  86:	80 50       	subi	r24, 0x00	; 0
  88:	94 40       	sbci	r25, 0x04	; 4
  8a:	10 f4       	brcc	.+4      	; 0x90 <main+0x26>
		{
			sbi(PORTD,0);
  8c:	90 9a       	sbi	0x12, 0	; 18
  8e:	f4 cf       	rjmp	.-24     	; 0x78 <main+0xe>
		}
		else
		{
			cbi(PORTD,0);
  90:	90 98       	cbi	0x12, 0	; 18
  92:	f2 cf       	rjmp	.-28     	; 0x78 <main+0xe>

00000094 <_exit>:
  94:	f8 94       	cli

00000096 <__stop_program>:
  96:	ff cf       	rjmp	.-2      	; 0x96 <__stop_program>
