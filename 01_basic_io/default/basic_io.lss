
basic_io.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000008e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  000000e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000028  00000000  00000000  00000102  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000001d3  00000000  00000000  0000012a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000fd  00000000  00000000  000002fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000174  00000000  00000000  000003fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000030  00000000  00000000  00000570  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000ea  00000000  00000000  000005a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000090  00000000  00000000  0000068a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000060  00000000  00000000  0000071a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	19 c0       	rjmp	.+50     	; 0x36 <__bad_interrupt>
   4:	18 c0       	rjmp	.+48     	; 0x36 <__bad_interrupt>
   6:	17 c0       	rjmp	.+46     	; 0x36 <__bad_interrupt>
   8:	16 c0       	rjmp	.+44     	; 0x36 <__bad_interrupt>
   a:	15 c0       	rjmp	.+42     	; 0x36 <__bad_interrupt>
   c:	14 c0       	rjmp	.+40     	; 0x36 <__bad_interrupt>
   e:	13 c0       	rjmp	.+38     	; 0x36 <__bad_interrupt>
  10:	12 c0       	rjmp	.+36     	; 0x36 <__bad_interrupt>
  12:	11 c0       	rjmp	.+34     	; 0x36 <__bad_interrupt>
  14:	10 c0       	rjmp	.+32     	; 0x36 <__bad_interrupt>
  16:	0f c0       	rjmp	.+30     	; 0x36 <__bad_interrupt>
  18:	0e c0       	rjmp	.+28     	; 0x36 <__bad_interrupt>
  1a:	0d c0       	rjmp	.+26     	; 0x36 <__bad_interrupt>
  1c:	0c c0       	rjmp	.+24     	; 0x36 <__bad_interrupt>
  1e:	0b c0       	rjmp	.+22     	; 0x36 <__bad_interrupt>
  20:	0a c0       	rjmp	.+20     	; 0x36 <__bad_interrupt>
  22:	09 c0       	rjmp	.+18     	; 0x36 <__bad_interrupt>
  24:	08 c0       	rjmp	.+16     	; 0x36 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61
  32:	0c d0       	rcall	.+24     	; 0x4c <main>
  34:	2a c0       	rjmp	.+84     	; 0x8a <_exit>

00000036 <__bad_interrupt>:
  36:	e4 cf       	rjmp	.-56     	; 0x0 <__vectors>

00000038 <delay_ms>:
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  38:	20 ed       	ldi	r18, 0xD0	; 208
  3a:	37 e0       	ldi	r19, 0x07	; 7
  3c:	04 c0       	rjmp	.+8      	; 0x46 <__SREG__+0x7>
  3e:	f9 01       	movw	r30, r18
  40:	31 97       	sbiw	r30, 0x01	; 1
  42:	f1 f7       	brne	.-4      	; 0x40 <__SREG__+0x1>
  44:	01 97       	sbiw	r24, 0x01	; 1
#define F_CPU 8000000UL
#include <util/delay.h>

void delay_ms(unsigned int i)
{
	while(i-->0)
  46:	00 97       	sbiw	r24, 0x00	; 0
  48:	d1 f7       	brne	.-12     	; 0x3e <__SP_H__>
	{
		_delay_ms(1);
	}
}
  4a:	08 95       	ret

0000004c <main>:

int main()
{
	DDRB = 0xFF;
  4c:	8f ef       	ldi	r24, 0xFF	; 255
  4e:	87 bb       	out	0x17, r24	; 23
	PORTB = 0x00;
  50:	18 ba       	out	0x18, r1	; 24
	while(1)
	{
		PORTB = 0xFF;
  52:	4f ef       	ldi	r20, 0xFF	; 255
  54:	20 ed       	ldi	r18, 0xD0	; 208
  56:	37 e0       	ldi	r19, 0x07	; 7
  58:	48 bb       	out	0x18, r20	; 24
  5a:	88 ee       	ldi	r24, 0xE8	; 232
  5c:	93 e0       	ldi	r25, 0x03	; 3
  5e:	03 c0       	rjmp	.+6      	; 0x66 <main+0x1a>
  60:	f9 01       	movw	r30, r18
  62:	31 97       	sbiw	r30, 0x01	; 1
  64:	f1 f7       	brne	.-4      	; 0x62 <main+0x16>
#define F_CPU 8000000UL
#include <util/delay.h>

void delay_ms(unsigned int i)
{
	while(i-->0)
  66:	01 97       	sbiw	r24, 0x01	; 1
  68:	5f ef       	ldi	r21, 0xFF	; 255
  6a:	8f 3f       	cpi	r24, 0xFF	; 255
  6c:	95 07       	cpc	r25, r21
  6e:	c1 f7       	brne	.-16     	; 0x60 <main+0x14>
	PORTB = 0x00;
	while(1)
	{
		PORTB = 0xFF;
		delay_ms(1000);
		PORTB = 0x00;
  70:	18 ba       	out	0x18, r1	; 24
  72:	88 ee       	ldi	r24, 0xE8	; 232
  74:	93 e0       	ldi	r25, 0x03	; 3
  76:	03 c0       	rjmp	.+6      	; 0x7e <main+0x32>
  78:	f9 01       	movw	r30, r18
  7a:	31 97       	sbiw	r30, 0x01	; 1
  7c:	f1 f7       	brne	.-4      	; 0x7a <main+0x2e>
#define F_CPU 8000000UL
#include <util/delay.h>

void delay_ms(unsigned int i)
{
	while(i-->0)
  7e:	01 97       	sbiw	r24, 0x01	; 1
  80:	5f ef       	ldi	r21, 0xFF	; 255
  82:	8f 3f       	cpi	r24, 0xFF	; 255
  84:	95 07       	cpc	r25, r21
  86:	c1 f7       	brne	.-16     	; 0x78 <main+0x2c>
  88:	e7 cf       	rjmp	.-50     	; 0x58 <main+0xc>

0000008a <_exit>:
  8a:	f8 94       	cli

0000008c <__stop_program>:
  8c:	ff cf       	rjmp	.-2      	; 0x8c <__stop_program>
